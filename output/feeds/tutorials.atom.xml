<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Datalogues - tutorials</title><link href="http://datalogues.com/" rel="alternate"></link><link href="http://datalogues.com/feeds/tutorials.atom.xml" rel="self"></link><id>http://datalogues.com/</id><updated>2017-05-27T10:20:00-04:00</updated><entry><title>How to Hide Your API Keys in Python</title><link href="http://datalogues.com/hide-api-keys.html" rel="alternate"></link><published>2017-05-27T10:20:00-04:00</published><updated>2017-05-27T10:20:00-04:00</updated><author><name>Monica Powell</name></author><id>tag:datalogues.com,2017-05-27:/hide-api-keys.html</id><summary type="html">&lt;p&gt;If you plan on programming any applications and storing your code in a public GitHub repository then it is important that you protect your API keys by ensuring that they are not searchable or otherwise publicly accessible.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Protect your application‚Äôs API Keys while committing to Git.&lt;/h2&gt;
&lt;p&gt;If you plan on programming any applications and storing your code in a public
&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; repository then it is important that you &lt;strong&gt;protect
your API keys&lt;/strong&gt; üîë by ensuring that they are not searchable or otherwise
publicly accessible.&lt;/p&gt;
&lt;h4&gt;What‚Äôs an API?&lt;/h4&gt;
&lt;p&gt;An application programming interface (API) is a structured set of instructions
for building applications. If you want to leverage data from services such as
Twitter, The New York Times, &lt;a href="https://medium.com/@slackhq"&gt;Slack&lt;/a&gt;,
&lt;a href="https://medium.com/@Spotify"&gt;Spotify&lt;/a&gt;, etc. then you should read their APIs to
figure out how to structure your queries to receive data from their service or
to post on their service.&lt;/p&gt;
&lt;h4&gt;What are API keys?&lt;/h4&gt;
&lt;p&gt;API keys allow developers to access APIs and are unique keys associated with
that particular developer and/or application. Just like you shouldn‚Äôt share your
passwords you should &lt;strong&gt;never&lt;/strong&gt; share your API keys. It is important to protect
your API keys so that people do not take any actions as you which could result
in your API key being revoked due to somebody else exceeding rate limits or
abusing/violating an APIs terms of service. A rate limit is when an application
limits the number of API calls that a specific application or user can make
during a specified period of time.&lt;/p&gt;
&lt;h4&gt;How do I protect my API keys on Github?&lt;/h4&gt;
&lt;p&gt;Here‚Äôs how to hide API keys in Python from GitHub using config.py to store your
sensitive API keys and tokens in a separate file from your main script. I used
similar code when accessing the Twitter Search API for my &lt;a href="https://github.com/M0nica/blackgirlmagic"&gt;blackgirlmagic
twitter bot&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Create 3 Files in Your Application&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;config.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This file will store your API keys. You just need to update the portion in the
strings with your API keys, depending on the service you may or may not need all
four types of API keys. These in particular are required to create a Twitter
application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;api_key = &amp;quot;YOUR_KEY&amp;quot;
api_secret = &amp;quot;YOUR_SECRET&amp;quot;
access_token = &amp;quot;YOUR_ACCESS_TOKEN&amp;quot;
token_secret = &amp;quot;YOUR_TOKEN_SECRET&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;main_script.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This file will store your main script that needs to access the API keys. This
file can be named whatever you like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twython&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Twython&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TwythonError&lt;/span&gt;
&lt;span class="c1"&gt;# create a Twython object by passing the necessary secret passwords&lt;/span&gt;
&lt;span class="n"&gt;twitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Twython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;.gitignore&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A .gitignore file tells GitHub to ignore the noted files, directories or files
that end in specific extensions when committing files to GitHub.&lt;strong&gt; This step is
crucial to ensure that your config.py file does not end up viewable on GitHub!
Here‚Äôs &lt;/strong&gt;&lt;a href="https://github.com/github/gitignore"&gt;a collection of useful .gitignore
templates&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;config.py
__pycache__
.ipynb_checkpoints
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Originally published at &lt;/em&gt;&lt;a href="http://www.blacktechdiva.com/hide-api-keys/"&gt;Black Tech
Diva&lt;/a&gt;*.&lt;/p&gt;</content><category term="GitHub"></category><category term="API"></category></entry><entry><title>How to Change Repo Language in GitHub</title><link href="http://datalogues.com/change-github-repo-language.html" rel="alternate"></link><published>2017-05-20T10:20:00-04:00</published><updated>2017-05-20T10:20:00-04:00</updated><author><name>Monica Powell</name></author><id>tag:datalogues.com,2017-05-20:/change-github-repo-language.html</id><summary type="html">&lt;p&gt;GitHub has a linguist library that auto-detects the language within every repository. Upon researching how to resolve GitHub misclassifying the language of your projects I found out the solution is as simple as telling GitHub which files to ignore.&lt;/p&gt;</summary><content type="html">&lt;!--Cover: ../images/github-laptop.jpg
Thumnail: ../images/github-laptop.jpg--&gt;

&lt;!-- Cover: ../images/github-laptop.jpg
 Thumbnail: ../images/github-laptop.jpg --&gt;

&lt;p&gt;I recently started working on a &lt;a href="https://github.com/M0nica/flask_weather"&gt;Weather app&lt;/a&gt; in Flask to auto-detect a user‚Äôs location based off of their IP address. After committing some updates to GitHub my app switched from being labeled as predominately Python to  98.9% CSS even though it was a Flask application in which most of the code I had written was in Python and HTML. Now and again, I do not agree with how GitHub classifies the languages in my repositories so I set out to figure out how to fix this issue.&lt;/p&gt;
&lt;p&gt;&lt;img alt="github_before_linguist_update.png" src="http://datalogues.com/images/github_before_linguist_update.png"&gt;&lt;/p&gt;
&lt;p&gt;Before: My Flask App Appeared in GitHub as 98.9% CSS.&lt;/p&gt;
&lt;h3&gt;Pro-tip: Help GitHub properly detect your repositories main language(s).&lt;/h3&gt;
&lt;p&gt;GitHub has a &lt;a href="https://github.com/github/linguist"&gt;linguist library&lt;/a&gt; that auto-detects the language within every repository. Upon researching how to resolve GitHub misclassifying the language of your projects I found out the solution is as simple as telling GitHub which files to ignore. While you still want to commit these files to GitHub and therefore can‚Äôt use a   .gitignore you can tell GitHub‚Äôs linguist which files to ignore in a   .gitattribute file. (Side note: Check out my piece on ‚ÄúHiding API Keys from GitHub‚Äù if you are interested in learning about   .gitignore).&lt;/p&gt;
&lt;p&gt;the solution is as simple as telling GitHub which files to ignore!&lt;/p&gt;
&lt;p&gt;Upon examining the documentation for the linguist library I learned that adding just one line to a  .gitattribute  file would resolve my language issues for this particular repo.&lt;/p&gt;
&lt;p&gt;My .gitattribute:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static/* linguist-vendored&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This one-line file told GitHub to ignore all of my files in my static/ folder which is where CSS and other assets are stored for a Flask app. Vendor files can sometimes take up a lot of relative space so I am telling the linguist to just ignore them (since they were accounting for 98.9% of my project)!&lt;/p&gt;
&lt;p&gt;&lt;img alt="github_after_linguist_update.png" src="http://datalogues.com/images/github_after_linguist_update.png"&gt;&lt;/p&gt;
&lt;p&gt;After: My Flask App Appears in GitHub now as 56.2% Python and 43.8% HTML.
Here‚Äôs a  repository with sample .gitattribute files for you try the next time you disagree with the linguist ;). Note: If the linguist truly is wrong GitHub encourages you to report it as an issue.&lt;/p&gt;
&lt;p&gt;I hope this article was helpful! I would love to hear some of your tricks for GitHub and am happy to answer any questions you may have.&lt;/p&gt;
&lt;p&gt;Also published on &lt;a href="https://medium.com/black-tech-diva/how-to-change-repo-language-in-github-c3e07819c5bb"&gt;Medium&lt;/a&gt;.&lt;/p&gt;</content><category term="GitHub"></category></entry></feed>